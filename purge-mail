/*
 Author: Pep Diz
 Based on script from http://labnol.org/?p=27605
 License: GPL v2

 About
 -------------------------
 
 This scripts creates a time trigger to periodically move emails to Trash based in certain criteria

 How to Use the Script
 -------------------------

 1- Copy the script as a google script in your drive or type it into google script editor
 
 2- Set Configuration variables to match your filter criteria
 
    Go to the top of this file to the CONFIGURATION BEGIN section and change configuration variables inside according to your needs. 
    
 3- Execute the Install function (Run -> Install) to install the trigger. Script will ask for authorization and you must grant it.
    Now you can close the script 'cause it's installed and will be working how often as you selected in configuration step.
    
 4- If you want to uninstall the purge just execute the Uninstall function (Run -> Uninstall).
     
 Additionally you can execute the funcion purgeMail whenever you want to launch an inmediate purge.
 Also you can execute the auxiliary functions showLabels to see what labels you have in your gmail account
 and showTriggers to see how many triggers you have installed with this script


CHANGELOG:

- Added a json object to save a set of labels with associated filter, say filter objects like:

{ "labels" : "inbox, updates", "min_size_mb" : 1, "age_days" : 365 } 
  
 and we have an array of filter objects to filter by labels
 
- Added a config object with globals

{ "run_freq_days" : 1 , "max-threads": 7, "filters":  [ filter-object, ... ] }


fields:

run_freq_days :  how many days to execute the purge 
max-threads : max number of threads to process each time the script is executed (touch with caution!)
filters: set of filters to purge, every filter is an object with the filter criteria to be purged using the following fields:
         labels: comma separated list of labels
         min_size_mb: minimun size in megabytes of message
         age_days: the age of the message in days, only messages older than this age will be selected 
*/

//---- CONFIGURATION BEGIN -------------------------

var oConf = { "run_freq_days" : 1 , "max-threads": 7, "filters": [ 
  { "labels" : "Inbox",
   "min_size_mb" : 3, "age_days" : 365 } ,
  { "labels" : "social,promotions,updates",
   "min_size_mb" : 0, "age_days" : 60 } ]
}


//---- CONFIGURATION END ---------------------------


// --- GLOBALS ---

// execute the purge every PURGE_EVERY_DAYS days
var PURGE_EVERY_DAYS = oConf.run_freq_days;
var chunk_size = 100;  // hard set (not parametrizable)
var max_chunks = oConf.max_treads;

function Install() {
  // the strategy is to create a trigger that runs every PURGE_EVERY_DAYS days purging chunk_size emails matching the criteria (labels, size and days)
  ScriptApp.newTrigger("purgeGmail").timeBased().everyDays(PURGE_EVERY_DAYS).create();
}

function Uninstall() {
  ScriptApp.getProjectTriggers().filter(function (t) {return t.getHandlerFunction() == "purgeGmail";}).forEach(function(e) { Logger.log("Deleting trigger " + e.getUniqueId() + ":" + e.getHandlerFunction()); ScriptApp.deleteTrigger(e);}); 
}

function showTriggers() {
  ScriptApp.getProjectTriggers().forEach(function (t) {Logger.log(t.getUniqueId() + ':' + t.getHandlerFunction());});
}  

function showLabels() {
  GmailApp.getUserLabels().map(function (l) {return l.getName();}).sort().forEach(function (e) {Logger.log(e);});
}

function purgeGmail() {
  var fstth=0
  var f=0;
  var age = new Date();  
  var purge="";
  var search="";
  
  for (f=0; f < oConf.filters.length ; f++) { 
    
    Logger.clear();  
    
    age.setDate(age.getDate() - oConf.filters[f].age_days);    
    purge  = Utilities.formatDate(age, Session.getScriptTimeZone(), "yyyy-MM-dd");  
    
    search = oConf.filters[f].labels.split(',').map(function (e) {return "label:" + e.trim();}).join('|') + " size:" + oConf.filters[f].min_size_mb.toString() + "m before:" + purge;
    Logger.log(search);
    
    try {
      
      // search & delete a chunk of mails a few times
      
      Logger.log("max_chunks: " + max_chunks);
      Logger.log("chunk_size: " + chunk_size);   
      
      
      var i=0;
      do {
        
        var threads = GmailApp.search(search, fstth, chunk_size);
        
        if (threads.length > 0) {
          Logger.log("threads: " + threads.length);
          Logger.log(threads[0].getId());
          GmailApp.moveThreadsToTrash(threads);   // this operation only works for 100 threads max
          fstth = fstth + threads.length;
        }
        i += 1;
      } while (i < max_chunks)
    
    } catch (e) {Logger.log(e);}
      
  }
}
